summary(cox)
saveRDS(list(model = cox, train = cc), file = '~/projects/Anti-PD1/models_v2/os_model3.rds')
cox = coxph(Surv(OS, OS.Event) ~ Age + TMB_h*Drug, data = cc, x = T, y = T)
summary(cox)
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = data$clinical
# Filter patients
tmb = clinical[-which(is.na(clinical$TMB)),]
cc = tmb
cc = cc[which(cc$StageIV == 'yes'),]
print(table(cc$tumor.type, cc$Drug))
cc$TMB_c = ifelse(cc$TMB <= 100, 'low',
ifelse(cc$TMB < 242 & cc$TMB > 100, 'medium', 'high'))
cc$TMB_h = ifelse(cc$TMB_c == 'high', 'yes', 'no')
cc$OS.Event = as.numeric(cc$OS.Event)
cc = cc[-which(is.na(cc$OS)),]
cox = coxph(Surv(OS, OS.Event) ~ Age + TMB_h*Drug, data = cc, x = T, y = T)
summary(cox)
saveRDS(list(model = cox, train = cc), file = '~/projects/Anti-PD1/models_v2/os_model3.rds')
setwd('~/git/PD1-DREAM-Pred1ctors/os_v2/')
# Overall Survival
# =====================================
# load packages
require(data.table)
require(sva)
require(survival)
require(impute)
require(biospear)
source('utils.r')
# get command lines args: args[1] rnas-seq gene level count data; args[2] clinical data; args[3] output file
# args = commandArgs(trailingOnly=TRUE)
counts.test = fread('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/GRCh37ERCC_refseq105_genes_count.csv',data.table = F); rownames(counts.test) <- counts.test[,1]; counts.test <- counts.test[,-1]; print("done reading in counts")
counts.test = as.data.frame(t(counts.test))
clinical.test = read.csv('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/clinical_data.csv', header = T, row.names = 1); print('Done reading clinical data!')
# load ours objects
trainObj = readRDS('models/os_biospear.rds')
pcaModel = trainObj$pca
trainData = trainObj$train
counts.train = trainObj$genes
genes = names(counts.train)
model1 = trainObj$model
model3 = readRDS('models/os_model3.rds')$model
summary(model3)
source('~/git/PD1-DREAM-Pred1ctors/os_v2/Pred1ctors_os_v2.r', echo=TRUE)
table(trainData$Cohort)
source('~/git/PD1-DREAM-Pred1ctors/os_v2/Pred1ctors_os_v2.r', echo=TRUE)
require(sva)
require(PCAtools)
require(biospear)
# Load Metacohort
# Alternative module
# ===============================================================
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = as.data.frame(data$clinical)
counts = data$counts
# Add advanced stage variable
clinical$stageiii = ifelse(clinical$stage == 'stage iii' | clinical$stage == 'stage iiia' | clinical$stage == 'stage iiib' | clinical$stage == 'stage iiic', 'yes', 'no')
clinical$Advstage = ifelse(clinical$stageiii == 'yes' | clinical$StageIV == 'yes', 'yes', 'no')
table(clinical$Advstage)
# PreProcessing metacohort data
# ===============================================================
# Removing patients without anti-PD1 or Chemo treatments
clinical = clinical[- which(clinical$Drug == 'no anti-PD-1' | clinical$Drug == 'see paper'),]
rownames(clinical) = clinical$patID
counts = counts[match(rownames(clinical), rownames(counts)),]
# ComBat
meta = clinical[, c('Cohort', 'patID')]
rownames(meta) = meta$patID
model = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$Cohort, mod = model)
combat = as.data.frame(t(combat))
# Calculating PCA´s
pca = pca(combat, clinical, removeVar = 0.1, transposed = T, center = F, scale = F)
elbow <- findElbowPoint(pca$variance); print(elbow)
# PFS
# ===============================================================
# Creating train dataset to PFS (PCA´s + cvrts)
cvrts = c('Cohort', 'Age', 'Gender', 'tumor.type', 'Drug', 'Advstage', 'PFS', 'PFS.Event')
train = cbind.data.frame(clinical[, cvrts], pca$rotated)
# Select only patients with available PFS
rm = unique(c(which(is.na(train$PFS)), which(is.na(train$PFS.Event))))
train = train[-rm,]
# Format covariates
train$Cohort = as.numeric(as.factor(train$Cohort)) - 1
train$Drug = as.numeric(as.factor(train$Drug)) - 1    # 0 = anti-PD1; 1 = Chemo
train$Gender = as.numeric(as.factor(train$Gender))    # 1 = female; 2 = male
train$tumor.type = as.numeric(as.factor(train$tumor.type)) - 1   # 0 = HeadNeck; 1 = LUAD; 2 = Lymphoma; 3 = Melanoma; 4 = LUSC
train$PFS.Event = as.numeric(train$PFS.Event)
train$PFS[which(train$PFS==0)]=1
train$Age[which(is.na(train$Age))] = median(train$Age, na.rm = T)
table(train$Advstage)
train$Advstage = as.numeric(as.factor(train$Advstage)) - 1
table(train$Advstage)
# Packages
require(sva)
require(PCAtools)
require(biospear)
# Load Metacohort
# Alternative module
# ===============================================================
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = as.data.frame(data$clinical)
counts = data$counts
# Add advanced stage variable
clinical$stageiii = ifelse(clinical$stage == 'stage iii' | clinical$stage == 'stage iiia' | clinical$stage == 'stage iiib' | clinical$stage == 'stage iiic', 'yes', 'no')
clinical$Advstage = ifelse(clinical$stageiii == 'yes' | clinical$StageIV == 'yes', 'yes', 'no')
table(clinical$Advstage)
# PreProcessing metacohort data
# ===============================================================
# Removing patients without anti-PD1 or Chemo treatments
clinical = clinical[- which(clinical$Drug == 'no anti-PD-1' | clinical$Drug == 'see paper'),]
rownames(clinical) = clinical$patID
counts = counts[match(rownames(clinical), rownames(counts)),]
# ComBat
meta = clinical[, c('Cohort', 'patID')]
rownames(meta) = meta$patID
model = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$Cohort, mod = model)
combat = as.data.frame(t(combat))
# Calculating PCA´s
pca = pca(combat, clinical, removeVar = 0.1, transposed = T, center = F, scale = F)
elbow <- findElbowPoint(pca$variance); print(elbow)
# PFS
# ===============================================================
# Creating train dataset to PFS (PCA´s + cvrts)
cvrts = c('Cohort', 'Age', 'Gender', 'tumor.type', 'Drug', 'Advstage', 'PFS', 'PFS.Event')
train = cbind.data.frame(clinical[, cvrts], pca$rotated)
# Select only patients with available PFS
rm = unique(c(which(is.na(train$PFS)), which(is.na(train$PFS.Event))))
train = train[-rm,]
# Format covariates
train$Cohort = as.numeric(as.factor(train$Cohort)) - 1
train$Drug = as.numeric(as.factor(train$Drug)) - 1    # 0 = anti-PD1; 1 = Chemo
train$Gender = as.numeric(as.factor(train$Gender))    # 1 = female; 2 = male
train$tumor.type = as.numeric(as.factor(train$tumor.type)) - 1   # 0 = HeadNeck; 1 = LUAD; 2 = Lymphoma; 3 = Melanoma; 4 = LUSC
train$Advstage = as.numeric(as.factor(train$Advstage)) - 1    # 0 = no; 1 = yes (advance)
train$PFS.Event = as.numeric(train$PFS.Event)
train$PFS[which(train$PFS==0)]=1
train$Age[which(is.na(train$Age))] = median(train$Age, na.rm = T)
# Run model
model = BMsel(train, paste0('PC', 1:15) , c("PFS","PFS.Event"), c("Cohort", "Age", "Gender", "tumor.type", "Advstage"), tt="Drug", inter=T, std.x = TRUE, std.i = FALSE, std.tt = F,
method = c('alassoR', 'alassoU', 'enet',  'lasso', 'lasso-1se', 'lasso-AIC', 'lasso-BIC',
'lasso-HQIC', 'lasso-pct', 'lasso-pcvl','lasso-RIC', 'PCAlasso', 'PLSlasso', 'ridgelasso',  'uniFDR'),
folds = 10, uni.fdr = 0.05, uni.test = 1, ss.rando = F, ss.nsub = 100,
ss.fsub = 0.5, ss.fwer = 1, ss.thr = 0.6, dfmax = 70,
pct.rep = 1, pct.qtl = 0.95, showWarn = TRUE, trace = TRUE)
table(is.na(train))
train$Cohort
train$Age
train$Gender
train$Advstage
train$tumor.type[67]
require(sva)
require(PCAtools)
require(biospear)
# Load Metacohort
# Alternative module
# ===============================================================
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = as.data.frame(data$clinical)
counts = data$counts
# Add advanced stage variable
clinical$stageiii = ifelse(clinical$stage == 'stage iii' | clinical$stage == 'stage iiia' | clinical$stage == 'stage iiib' | clinical$stage == 'stage iiic', 'yes', 'no')
clinical$Advstage = ifelse(clinical$stageiii == 'yes' | clinical$StageIV == 'yes', 'yes', 'no')
table(clinical$Advstage)
summary(clinical$Advstage)
dim(clinical)
291+637
946+928
946-928
table(clinical$tumor.type, clinical$Advstage)
clinical[which(clinical$tumor.type = 'Lymphoma'),]
clinical[which(clinical$tumor.type == 'Lymphoma'),]
require(sva)
require(PCAtools)
require(biospear)
# Load Metacohort
# Alternative module
# ===============================================================
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = as.data.frame(data$clinical)
counts = data$counts
# Add advanced stage variable
clinical$stageiii = ifelse(clinical$stage == 'stage iii' | clinical$stage == 'stage iiia' | clinical$stage == 'stage iiib' | clinical$stage == 'stage iiic', 'yes', 'no')
clinical$Advstage = ifelse(clinical$stageiii == 'yes' | clinical$StageIV == 'yes', 'yes', 'no')
clinical = clinical[-which(clinical$tumor.type == 'Lymphoma'),]
# PreProcessing metacohort data
# ===============================================================
# Removing patients without anti-PD1 or Chemo treatments
clinical = clinical[- which(clinical$Drug == 'no anti-PD-1' | clinical$Drug == 'see paper'),]
rownames(clinical) = clinical$patID
counts = counts[match(rownames(clinical), rownames(counts)),]
# ComBat
meta = clinical[, c('Cohort', 'patID')]
rownames(meta) = meta$patID
model = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$Cohort, mod = model)
combat = as.data.frame(t(combat))
# Calculating PCA´s
pca = pca(combat, clinical, removeVar = 0.1, transposed = T, center = F, scale = F)
elbow <- findElbowPoint(pca$variance); print(elbow)
# PFS
# ===============================================================
# Creating train dataset to PFS (PCA´s + cvrts)
cvrts = c('Cohort', 'Age', 'Gender', 'tumor.type', 'Drug', 'Advstage', 'PFS', 'PFS.Event')
train = cbind.data.frame(clinical[, cvrts], pca$rotated)
# Select only patients with available PFS
rm = unique(c(which(is.na(train$PFS)), which(is.na(train$PFS.Event))))
train = train[-rm,]
# Format covariates
train$Cohort = as.numeric(as.factor(train$Cohort)) - 1
train$Drug = as.numeric(as.factor(train$Drug)) - 1    # 0 = anti-PD1; 1 = Chemo
train$Gender = as.numeric(as.factor(train$Gender))    # 1 = female; 2 = male
train$tumor.type = as.numeric(as.factor(train$tumor.type)) - 1   # 0 = HeadNeck; 1 = LUAD; 2 = Lymphoma; 3 = Melanoma; 4 = LUSC
train$Advstage = as.numeric(as.factor(train$Advstage)) - 1    # 0 = no; 1 = yes (advance)
train$PFS.Event = as.numeric(train$PFS.Event)
train$PFS[which(train$PFS==0)]=1
train$Age[which(is.na(train$Age))] = median(train$Age, na.rm = T)
# Run model
model = BMsel(train, paste0('PC', 1:15) , c("PFS","PFS.Event"), c("Cohort", "Age", "Gender", "tumor.type", "Advstage"), tt="Drug", inter=T, std.x = TRUE, std.i = FALSE, std.tt = F,
method = c('alassoR', 'alassoU', 'enet',  'lasso', 'lasso-1se', 'lasso-AIC', 'lasso-BIC',
'lasso-HQIC', 'lasso-pct', 'lasso-pcvl','lasso-RIC', 'PCAlasso', 'PLSlasso', 'ridgelasso',  'uniFDR'),
folds = 10, uni.fdr = 0.05, uni.test = 1, ss.rando = F, ss.nsub = 100,
ss.fsub = 0.5, ss.fwer = 1, ss.thr = 0.6, dfmax = 70,
pct.rep = 1, pct.qtl = 0.95, showWarn = TRUE, trace = TRUE)
model
table(train$tumor.type)
pred = predRes(res = model,
method=c('alassoR', 'alassoU', 'enet',  'lasso', 'lasso-1se', 'lasso-AIC', 'lasso-BIC', 'lasso-HQIC',
'lasso-pct', 'lasso-pcvl','lasso-RIC', 'PCAlasso', 'PLSlasso', 'ridgelasso'),
traindata = train,
int.cv=T,
int.cv.nfold = 5,
time=seq(100,1800,100),
trace = TRUE,
ncores = 5)
# Convert class to PCA object
pca <- list(sdev = pca$sdev,
rotation = data.matrix(pca$loadings),
x = data.matrix(pca$rotated),
center = TRUE, scale = TRUE)
class(pca) <- 'prcomp'
res = list(pca = pca, train = train, genes = counts, model = model, pred = pred)
saveRDS(res, file = '~/projects/Anti-PD1/models_v2/pfs_biospear_alternative.rds')
setwd('~/git/PD1-DREAM-Pred1ctors/pfs_v3/')
# Progression Free Survival (PFS)
# =====================================
# load packages
require(data.table)
require(sva)
require(survival)
require(impute)
source('utils.r')
# get command lines args: args[1] rnas-seq gene level count data; args[2] clinical data; args[3] output file
# args = commandArgs(trailingOnly=TRUE)
counts.test = fread('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/GRCh37ERCC_refseq105_genes_count.csv',data.table = F); rownames(counts.test) <- counts.test[,1]; counts.test <- counts.test[,-1]; print("done reading in counts")
counts.test = as.data.frame(t(counts.test))
clinical.test = read.csv('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/clinical_data.csv', header = T, row.names = 1); print('Done reading clinical data!')
# load ours objects
trainObj = readRDS('models/pfs_biospear_alternative.rds')
pcaModel = trainObj$pca
trainData = trainObj$train
counts.train = trainObj$genes
genes = names(counts.train)
model_PCA = trainObj$model
model_TMB = readRDS('models/pfs_model3.rds')$model
print('Done load training objects!')
# Match genes in test count data
counts.test = counts.test[, match(genes, names(counts.test))]
print('Done match genes!')
# Standarize and scale
counts.test = standarize(counts.test, log2 = T, scale = T)
print('Done standarization!')
# Impute NA´s
impNA = impute.knn(t(counts.test))
counts.test = as.data.frame(t(impNA$data))
print('Done NA imputing!')
meta = data.frame(patID = c(rownames(counts.train), rownames(counts.test)),
subset = c(rep('train', nrow(counts.train)), rep('test', nrow(counts.test))))
rownames(meta) = meta$patID
counts = rbind.data.frame(counts.train, counts.test)
m = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$subset, mod = m, ref.batch = 'train')
combat = as.data.frame(t(combat))
counts.test = combat[match(rownames(counts.test), rownames(combat)), ]
print('Done ComBat!')
test.pca = predict(pcaModel, newdata = counts.test)
test.pca = as.data.frame(test.pca)
print('Done predict PCA´s in test data!')
summary(model_TMB)
# Format clinical data
clinical.test$SEX[which(clinical.test$SEX == 'M')] = 2
clinical.test$SEX[which(clinical.test$SEX == 'F')] = 1
require(sva)
require(PCAtools)
require(biospear)
# Load Metacohort
# Alternative module
# ===============================================================
data = readRDS('~/projects/Anti-PD1/data/metacohort/metacohort.rds')
clinical = as.data.frame(data$clinical)
counts = data$counts
# Add advanced stage variable
clinical$stageiii = ifelse(clinical$stage == 'stage iii' | clinical$stage == 'stage iiia' | clinical$stage == 'stage iiib' | clinical$stage == 'stage iiic', 'yes', 'no')
clinical$Advstage = ifelse(clinical$stageiii == 'yes' | clinical$StageIV == 'yes', 'yes', 'no')
clinical = clinical[-which(clinical$tumor.type == 'Lymphoma'),]
# PreProcessing metacohort data
# ===============================================================
# Removing patients without anti-PD1 or Chemo treatments
clinical = clinical[- which(clinical$Drug == 'no anti-PD-1' | clinical$Drug == 'see paper'),]
rownames(clinical) = clinical$patID
counts = counts[match(rownames(clinical), rownames(counts)),]
# ComBat
meta = clinical[, c('Cohort', 'patID')]
rownames(meta) = meta$patID
model = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$Cohort, mod = model)
combat = as.data.frame(t(combat))
# Calculating PCA´s
pca = pca(combat, clinical, removeVar = 0.1, transposed = T, center = F, scale = F)
elbow <- findElbowPoint(pca$variance); print(elbow)
# PFS
# ===============================================================
# Creating train dataset to PFS (PCA´s + cvrts)
cvrts = c('Cohort', 'Age', 'Gender', 'tumor.type', 'Drug', 'Advstage', 'PFS', 'PFS.Event')
train = cbind.data.frame(clinical[, cvrts], pca$rotated)
# Select only patients with available PFS
rm = unique(c(which(is.na(train$PFS)), which(is.na(train$PFS.Event))))
train = train[-rm,]
# Format covariates
train$Cohort = as.numeric(as.factor(train$Cohort)) - 1
train$Drug = as.numeric(as.factor(train$Drug)) - 1    # 0 = anti-PD1; 1 = Chemo
table(train$Gender)
train$Gender = as.numeric(as.factor(train$Gender))    # 1 = female; 2 = male
table(train$Gender)
table(train$tumor.type)
train$tumor.type = as.numeric(as.factor(train$tumor.type)) - 1   # 0 = HeadNeck; 1 = LUAD; 2 = Melanoma; 3 = LUSC
table(train$tumor.type)
#!/usr/bin/env Rscript
setwd('~/git/PD1-DREAM-Pred1ctors/pfs_v3/')
# Progression Free Survival (PFS)
# =====================================
# load packages
require(data.table)
require(sva)
require(survival)
require(impute)
source('utils.r')
# get command lines args: args[1] rnas-seq gene level count data; args[2] clinical data; args[3] output file
# args = commandArgs(trailingOnly=TRUE)
counts.test = fread('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/GRCh37ERCC_refseq105_genes_count.csv',data.table = F); rownames(counts.test) <- counts.test[,1]; counts.test <- counts.test[,-1]; print("done reading in counts")
counts.test = as.data.frame(t(counts.test))
clinical.test = read.csv('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/clinical_data.csv', header = T, row.names = 1); print('Done reading clinical data!')
# load ours objects
trainObj = readRDS('models/pfs_biospear_alternative.rds')
pcaModel = trainObj$pca
trainData = trainObj$train
counts.train = trainObj$genes
genes = names(counts.train)
model_PCA = trainObj$model
model_TMB = readRDS('models/pfs_model3.rds')$model
print('Done load training objects!')
# Match genes in test count data
counts.test = counts.test[, match(genes, names(counts.test))]
print('Done match genes!')
# Standarize and scale
counts.test = standarize(counts.test, log2 = T, scale = T)
print('Done standarization!')
# Impute NA´s
impNA = impute.knn(t(counts.test))
counts.test = as.data.frame(t(impNA$data))
print('Done NA imputing!')
# ComBat
meta = data.frame(patID = c(rownames(counts.train), rownames(counts.test)),
subset = c(rep('train', nrow(counts.train)), rep('test', nrow(counts.test))))
rownames(meta) = meta$patID
counts = rbind.data.frame(counts.train, counts.test)
m = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$subset, mod = m, ref.batch = 'train')
combat = as.data.frame(t(combat))
counts.test = combat[match(rownames(counts.test), rownames(combat)), ]
print('Done ComBat!')
# Predict PCA
test.pca = predict(pcaModel, newdata = counts.test)
test.pca = as.data.frame(test.pca)
print('Done predict PCA´s in test data!')
# Format clinical data
clinical.test$SEX[which(clinical.test$SEX == 'M')] = 2
clinical.test$SEX[which(clinical.test$SEX == 'F')] = 1
clinical.test$CRFHIST[which(clinical.test$CRFHIST == 'NON-SQUAMOUS')] = 1
clinical.test$CRFHIST[which(clinical.test$CRFHIST == 'SQUAMOUS')] = 3
# Add Clinical data
test.pca$Cohort = 4.5
test.pca$Age = round(clinical.test$AAGE, 0)
test.pca$Gender = as.numeric(clinical.test$SEX)
test.pca$tumor.type = as.numeric(clinical.test$CRFHIST)
test.pca$Drug = 0
test.pca$Advstage = 1
print('Done add clinical data!')
xx = readRDS('~/git/PD1-DREAM-Pred1ctors/pfs_v3/models/pfs_biospear_alternative.rds')
# Select best model
# ===============================================================
pred1 = xx$pred
times = seq(100,1800,100)
methods = c('alassoR', 'alassoU', 'enet',  'lasso', 'lasso-1se', 'lasso-AIC', 'lasso-BIC', 'lasso-HQIC', 'lasso-pct', 'lasso-pcvl','lasso-RIC', 'PCAlasso', 'PLSlasso',  'ridgelasso')
c = list()
b = list()
d = list()
for (i in seq_along(pred1)) {
# Get C-Index
c[[i]] = as.data.frame(pred1[[i]][1])[1,]
# Get Brier error
b[[i]] = as.data.frame(pred1[[i]][1])[2,]
# Get Delta-Index
d[[i]] = as.data.frame(pred1[[i]][1])[3,]
}
res = list()
res$CIndex = as.data.frame(rbindlist(c)); rownames(res$CIndex) = times; colnames(res$CIndex) = methods
res$Briererror = as.data.frame(rbindlist(b)); rownames(res$Briererror) = times; colnames(res$Briererror) = methods
res$DeltaCIndex = as.data.frame(rbindlist(d)); rownames(res$DeltaCIndex) = times; colnames(res$DeltaCIndex) = methods
predictions = list(CIndex = res$CIndex,
Briererror = res$Briererror,
DeltaCIndex = res$DeltaCIndex)
predictions$CIndex
predictions$DeltaCIndex
require(data.table)
require(ggplot2)
require(viridis)
# Select best model
# ===============================================================
pred1 = xx$pred
times = seq(100,1800,100)
methods = c('alassoR', 'alassoU', 'enet',  'lasso', 'lasso-1se', 'lasso-AIC', 'lasso-BIC', 'lasso-HQIC', 'lasso-pct', 'lasso-pcvl','lasso-RIC', 'PCAlasso', 'PLSlasso',  'ridgelasso')
c = list()
b = list()
d = list()
for (i in seq_along(pred1)) {
# Get C-Index
c[[i]] = as.data.frame(pred1[[i]][2])[1,]
# Get Brier error
b[[i]] = as.data.frame(pred1[[i]][2])[2,]
# Get Delta-Index
d[[i]] = as.data.frame(pred1[[i]][2])[3,]
}
res = list()
res$CIndex = as.data.frame(rbindlist(c)); rownames(res$CIndex) = times; colnames(res$CIndex) = methods
res$Briererror = as.data.frame(rbindlist(b)); rownames(res$Briererror) = times; colnames(res$Briererror) = methods
res$DeltaCIndex = as.data.frame(rbindlist(d)); rownames(res$DeltaCIndex) = times; colnames(res$DeltaCIndex) = methods
predictions = list(CIndex = res$CIndex,
Briererror = res$Briererror,
DeltaCIndex = res$DeltaCIndex)
predictions$CIndex
xx$model
#!/usr/bin/env Rscript
setwd('~/git/PD1-DREAM-Pred1ctors/pfs_v3/')
# Progression Free Survival (PFS)
# =====================================
# load packages
require(data.table)
require(sva)
require(survival)
require(impute)
source('utils.r')
# get command lines args: args[1] rnas-seq gene level count data; args[2] clinical data; args[3] output file
# args = commandArgs(trailingOnly=TRUE)
counts.test = fread('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/GRCh37ERCC_refseq105_genes_count.csv',data.table = F); rownames(counts.test) <- counts.test[,1]; counts.test <- counts.test[,-1]; print("done reading in counts")
counts.test = as.data.frame(t(counts.test))
clinical.test = read.csv('~/git/PD1-DREAM-Pred1ctors/CM_026_formatted_synthetic_data_subset/clinical_data.csv', header = T, row.names = 1); print('Done reading clinical data!')
# load ours objects
trainObj = readRDS('models/pfs_biospear_alternative.rds')
pcaModel = trainObj$pca
trainData = trainObj$train
counts.train = trainObj$genes
genes = names(counts.train)
model_PCA = trainObj$model
model_TMB = readRDS('models/pfs_model3.rds')$model
print('Done load training objects!')
# Match genes in test count data
counts.test = counts.test[, match(genes, names(counts.test))]
print('Done match genes!')
# Standarize and scale
counts.test = standarize(counts.test, log2 = T, scale = T)
print('Done standarization!')
# Impute NA´s
impNA = impute.knn(t(counts.test))
counts.test = as.data.frame(t(impNA$data))
print('Done NA imputing!')
# ComBat
meta = data.frame(patID = c(rownames(counts.train), rownames(counts.test)),
subset = c(rep('train', nrow(counts.train)), rep('test', nrow(counts.test))))
rownames(meta) = meta$patID
counts = rbind.data.frame(counts.train, counts.test)
m = model.matrix(~1, data = meta)
combat = ComBat(dat = t(counts), batch = meta$subset, mod = m, ref.batch = 'train')
combat = as.data.frame(t(combat))
counts.test = combat[match(rownames(counts.test), rownames(combat)), ]
print('Done ComBat!')
# Predict PCA
test.pca = predict(pcaModel, newdata = counts.test)
test.pca = as.data.frame(test.pca)
print('Done predict PCA´s in test data!')
# Format clinical data
clinical.test$SEX[which(clinical.test$SEX == 'M')] = 2
clinical.test$SEX[which(clinical.test$SEX == 'F')] = 1
clinical.test$CRFHIST[which(clinical.test$CRFHIST == 'NON-SQUAMOUS')] = 1
clinical.test$CRFHIST[which(clinical.test$CRFHIST == 'SQUAMOUS')] = 3
table(trainData$Cohort)
median(trainData$Cohort)
median(trainData$Cohort)
mean(trainData$Cohort)
source('~/git/PD1-DREAM-Pred1ctors/pfs_v3/Pred1ctors_pfs_v3.r', echo=TRUE)
summary(model_TMB)
